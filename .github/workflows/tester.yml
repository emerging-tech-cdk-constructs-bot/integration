on: 
  workflow_dispatch:
    inputs:
      pullRequestNumber:
        type: string
        required: true
        default: '2'
      externalId:
        type: string
        required: true
        default: '1716601244789'

jobs:
  tester:
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ github.token }}
    permissions:
      id-token: write
      contents: read
      checks: write
      pull-requests: read
    steps:
      - name: Use the GitHub API GraphQL and return the checkRun if matching the externalId if associated with an open, mergeable, approved, labeled, not in draft pull request
        id: graphql
        run: |
          echo repository=`gh api graphql \
              --raw-field repositoryName="${{github.event.repository.name}}" \
              --raw-field repositoryOwner="${{github.event.repository.owner.login}}" \
              --field pullRequestNumber="${{inputs.pullRequestNumber}}" \
              --field query='query($repositoryName: String!, $repositoryOwner: String!, $pullRequestNumber: Int!){
                repository(followRenames: true, name: $repositoryName, owner: $repositoryOwner) {
                  collaborators(first: 100) {
                      edges {
                          permission
                          node {
                              login
                          }
                      }
                  }
                  pullRequest(number: $pullRequestNumber) {
                    state
                    reviewDecision
                    mergeable
                    isDraft
                    labels(first: 100) {
                      nodes {
                        name
                      }
                    }
                    statusCheckRollup {
                      contexts(first: 100) {
                        checkRunCount
                        nodes {
                          ... on CheckRun {
                            id
                            isRequired(pullRequestNumber: $pullRequestNumber)
                            name
                            status
                            databaseId
                            externalId
                            conclusion
                            summary
                            text
                            title
                          }
                        }
                      }
                    }
                  }
                }
              }' | jq -c '.data.repository'  #  | jq -c '.data.repository.pullRequest | select (.state == "OPEN") | select (.reviewDecision == "APPROVED") | select (.mergeable == "MERGEABLE") | select (.labels.nodes[].name == "integration") | select (.isDraft == false) | .statusCheckRollup.contexts.nodes[] | select (.externalId == "${{ inputs.externalId }}") | .'` >> "$GITHUB_OUTPUT"
      - name: The admins
        id: collaborators
        run: |
          echo "actor ${{ github.actor }} and triggering actor ${{ github.triggering_actor }}"
          echo admins=`echo '${{ steps.graphql.outputs.repository }}' | jq -c '.collaborators.edges[] | select(.permission == "ADMIN") | [.node.login]'` >> "$GITHUB_OUTPUT"
      - name: Get the check run
        id: pullrequest
        run: |
          echo checkrun=`echo '${{ steps.graphql.outputs.repository }}' | jq -c '.pullRequest | select (.state == "OPEN") | select (.reviewDecision == "APPROVED") | select (.mergeable == "MERGEABLE") | select (.labels.nodes[].name == "integration") | select (.isDraft == false) | .statusCheckRollup.contexts.nodes[] | select (.externalId == "${{ inputs.externalId }}") | .'` >> "$GITHUB_OUTPUT"          
      - name: Set the properties
        id: props
        run: |
          echo status=`echo '${{ steps.pullrequest.outputs.checkRun }}' | jq -r '.status'` >> "$GITHUB_OUTPUT";
          echo databaseId=`echo '${{ steps.pullrequest.outputs.checkRun }}' | jq -r '.databaseId'` >> "$GITHUB_OUTPUT";
          echo externalId=`echo '${{ steps.pullrequest.outputs.checkRun }}' | jq -r '.externalId'` >> "$GITHUB_OUTPUT";
          echo conclusion=`echo '${{ steps.pullrequest.outputs.checkRun }}' | jq -r '.conclusion'` >> "$GITHUB_OUTPUT";
          echo isRequired=`echo '${{ steps.pullrequest.outputs.checkRun }}' | jq -r '.isRequired'` >> "$GITHUB_OUTPUT";
          echo name=`echo '${{ steps.pullrequest.outputs.checkRun }}' | jq -r '.name'` >> "$GITHUB_OUTPUT";
      - name: Debug outputs
        run: |
          echo ${{ steps.collaborators.outputs.admins }};
          echo ${{ steps.pullrequest.outputs.checkrun }};
          echo ${{ steps.props.outputs.status }};
      - name: If checkRun's status is not completed
        if: 
          steps.props.outputs.name == 'integration' &&
          steps.props.outputs.status != 'COMPLETED'
        run: |
          echo "NOT COMPLETED yet, status is ${{ steps.props.outputs.status }}";
