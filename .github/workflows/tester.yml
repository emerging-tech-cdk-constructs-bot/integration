on: 
  workflow_dispatch:
    inputs:
      pullRequestNumber:
        type: string
        required: true
        default: '0'
      externalId:
        type: string
        required: true
        default: ''
jobs:
  tester:
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ github.token }}
    permissions:
      id-token: write
      contents: read
      checks: write
      pull-requests: read
    steps:
      - name: Echo the event
        run: |
          cat << OBJECT
          ${{ toJson(github) }}
          OBJECT
      - name: Inputs
        run: |
          cat << OBJECT
          ${{ toJson(inputs) }}
          OBJECT
      - name: GitHub CLI version
        run: gh --version
      - name: stuff
        run: echo ${{github.event.repository.name}} ${{github.event.repository.owner.login}} ${{inputs.pullRequestNumber}} ${{inputs.externalId}}
      - name: Run GitHub API GraphQL
        id: graphql
        run: |
          echo repository=`gh api graphql \
              --raw-field repositoryName="${{github.event.repository.name}}" \
              --raw-field repositoryOwner="${{github.event.repository.owner.login}}" \
              --field pullRequestNumber="${{inputs.pullRequestNumber}}" \
              --raw-field externalId="${{inputs.externalId}}" \
              --field query='query($repositoryName: String!, $repositoryOwner: String!, $pullRequestNumber: Int!){
                repository(followRenames: true, name: $repositoryName, owner: $repositoryOwner) {
                  pullRequest(number: $pullRequestNumber) {
                    state
                    reviewDecision
                    mergeable
                    statusCheckRollup {
                      contexts(first: 100) {
                        checkRunCount
                        nodes {
                          ... on CheckRun {
                            id
                            isRequired(pullRequestNumber: $pullRequestNumber)
                            name
                            status
                            externalId
                            conclusion
                            summary
                            text
                            title
                          }
                        }
                      }
                    }
                  }
                }
              }' | jq -c '{
                "state": '.data.repository.pullRequest.state',
                "reviewDecision": '.data.repository.pullRequest.reviewDecision',
                "mergeable": '.data.repository.pullRequest.mergeable',
                "status": '.data.repository.pullRequest.statusCheckRollup.contexts.nodes[].status',
                "externalId": '.data.repository.pullRequest.statusCheckRollup.contexts.nodes[].externalId',
                "checkRunId": '.data.repository.pullRequest.statusCheckRollup.contexts.nodes[].databaseId',
                "conclusion": '.data.repository.pullRequest.statusCheckRollup.contexts.nodes[].conclusion',
                "summary": '.data.repository.pullRequest.statusCheckRollup.contexts.nodes[].summary',
                "title": '.data.repository.pullRequest.statusCheckRollup.contexts.nodes[].title',
                "text": '.data.repository.pullRequest.statusCheckRollup.contexts.nodes[].text'
              }'` >> "$GITHUB_OUTPUT"
      - name: State of the repo
        run: |
          cat << OBJECT
          ${{ toJson(steps.graphql.outputs) }}
          OBJECT
          
