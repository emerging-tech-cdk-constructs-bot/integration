on: 
  workflow_dispatch:
    inputs:
      pullRequestNumber:
        type: string
        required: true
        default: '2'
      checkRunId:
        type: string
        required: true
        default: '25237483792'
jobs:
  tester:
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ github.token }}
    permissions:
      id-token: write
      contents: read
      checks: write
      pull-requests: read
    steps:
      - name: Show the github
        run: |
          cat << OBJECT
          ${{ toJson(github) }}
          OBJECT
      - name: Show the inputs
        run: |
          cat << OBJECT
          ${{ toJson(inputs) }}
          OBJECT
      - name: GitHub CLI version
        run: gh --version
      - name: Parameters to send into GitHub's CLI API
        run: echo ${{github.event.repository.name}} ${{github.event.repository.owner.login}} ${{inputs.pullRequestNumber}} ${{inputs.checkRunId}}
      - name: Run GitHub API GraphQL
        id: graphql
        run: |
          echo checkRun=`gh api graphql \
              --raw-field repositoryName="${{github.event.repository.name}}" \
              --raw-field repositoryOwner="${{github.event.repository.owner.login}}" \
              --field pullRequestNumber="${{inputs.pullRequestNumber}}" \
              --field query='query($repositoryName: String!, $repositoryOwner: String!, $pullRequestNumber: Int!){
                repository(followRenames: true, name: $repositoryName, owner: $repositoryOwner) {
                  pullRequest(number: $pullRequestNumber) {
                    state
                    reviewDecision
                    mergeable
                    statusCheckRollup {
                      contexts(first: 100) {
                        checkRunCount
                        nodes {
                          ... on CheckRun {
                            id
                            isRequired(pullRequestNumber: $pullRequestNumber)
                            name
                            status
                            databaseId
                            externalId
                            conclusion
                            summary
                            text
                            title
                          }
                        }
                      }
                    }
                  }
                }
              }' | jq -c '.data.repository.pullRequest | select (.state == "OPEN") | select (.reviewDecision == "APPROVED") | select (.mergeable == "MERGEABLE") | .statusCheckRollup.contexts.nodes[] | select (.databaseId == ${{ inputs.checkRunId }}) | .'` >> "$GITHUB_OUTPUT"
      - name: Debug the GitHub API GraphQL output
        run: |
          cat << OBJECT
          ${{ toJSON(steps.graphql.outputs) }}
          OBJECT
      - name: Set the properties
        id: props
        run: |
          echo status=`echo '${{ steps.graphql.outputs.checkRun }}' | jq -r '.status'` >> "$GITHUB_OUTPUT";
          echo externalId=`echo '${{ steps.graphql.outputs.checkRun }}' | jq -r '.externalId'` >> "$GITHUB_OUTPUT";
          echo conclusion=`echo '${{ steps.graphql.outputs.checkRun }}' | jq -r '.conclusion'` >> "$GITHUB_OUTPUT";
          echo isRequired=`echo '${{ steps.graphql.outputs.checkRun }}' | jq -r '.isRequired'` >> "$GITHUB_OUTPUT";
          echo name=`echo '${{ steps.graphql.outputs.checkRun }}' | jq -r '.name'` >> "$GITHUB_OUTPUT";
      - name: If the check run status is completed and failure
        if: 
          steps.props.outputs.name == 'integration' && 
          steps.props.outputs.status == 'COMPLETED' && 
          (steps.props.outputs.conclusion == 'FAILURE')
        run: |
          echo "COMPLETED conclusion is ${{ steps.props.outputs.conclusion }}";
          exit 1;
      - name: If the check run status is completed and success
        if: 
          steps.props.outputs.name == 'integration' && 
          steps.props.outputs.status == 'COMPLETED' && 
          (steps.props.outputs.conclusion == 'SUCCESS')
        run: |
          echo "COMPLETED conclusion is ${{ steps.props.outputs.conclusion }}";
          exit 0;
      - name: If the status is not completed
        if: 
          steps.props.outputs.name == 'integration' &&
          steps.props.outputs.status != 'COMPLETED'
        run: |
          echo "NOT COMPLETED yet, status is ${{ steps.props.outputs.status }}";
